cmake_minimum_required(VERSION 3.12)
set(EXEC_NAME "Fluid-Rigid-SPH")
project(${EXEC_NAME})

set(GLFW_BUILD_DOCS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_TESTS OFF CACHE BOOL "" FORCE)
set(GLFW_BUILD_EXAMPLES OFF CACHE BOOL "" FORCE)

if(DEFINED GLFW_SRC_DIR)
    add_subdirectory(${GLFW_SRC_DIR} glfw)
else()
    find_package(glfw3 3.2 REQUIRED)
endif()
if(DEFINED GLEW_SRC_DIR)
    add_subdirectory(${GLEW_SRC_DIR} glew)
    set(GLEW_INCLUDE_DIRS ${GLEW_SRC_DIR}/include)
    set(GLEW_LIBRARIES libglew_static)
else()
    find_package(GLEW REQUIRED)
endif()
find_package(OpenGL REQUIRED)
if(DEFINED GLM_SRC_DIR)
    set(GLM_INCLUDE_DIRS ${GLM_SRC_DIR})
else()
    find_package(glm REQUIRED)
endif()

FIND_PACKAGE( OpenMP REQUIRED)
if(OPENMP_FOUND)
    message("OPENMP FOUND")
    set(CMAKE_C_FLAGS "${CMAKE_C_FLAGS} ${OpenMP_C_FLAGS}")
    set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} ${OpenMP_CXX_FLAGS}")
    set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} ${OpenMP_EXE_LINKER_FLAGS}")
endif()

file(GLOB_RECURSE SOURCES src/*.cpp)
add_executable(${EXEC_NAME} ${SOURCES})
target_include_directories(${EXEC_NAME} PUBLIC include)

target_include_directories(${EXEC_NAME} PUBLIC ${OPENGL_INCLUDE_DIR})
target_include_directories(${EXEC_NAME} PUBLIC ${GLEW_INCLUDE_DIRS})
target_include_directories(${EXEC_NAME} PUBLIC ${GLM_INCLUDE_DIRS})


target_link_libraries(${EXEC_NAME} glfw)
target_link_libraries(${EXEC_NAME} ${GLEW_LIBRARIES})
target_link_libraries(${EXEC_NAME} ${OPENGL_gl_LIBRARY})

if(UNIX)
    target_link_libraries(${EXEC_NAME} X11)
    target_link_libraries(${EXEC_NAME} Xrandr)
    target_link_libraries(${EXEC_NAME} Xi)
    target_link_libraries(${EXEC_NAME} Xxf86vm)
    target_link_libraries(${EXEC_NAME} GL)
elseif(WIN32)
    target_link_libraries(${EXEC_NAME} opengl32)
endif()
